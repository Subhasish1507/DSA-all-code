class Solution {
    List<String> result = new ArrayList<>();
    public void solve(int idx , String digits , StringBuilder temp , Map<Character , String> mpp)
    {
        if(idx>=digits.length())
        {
            result.add(temp.toString());
            return;
        }
        char ch = digits.charAt(idx);
        String str = mpp.get(ch);
        for(int i =0 ; i<str.length();i++)
        {
            temp.append(str.charAt(i));
            solve(idx + 1, digits, temp, mpp);
            temp.deleteCharAt(temp.length() - 1);
        }
    }
    public List<String> letterCombinations(String digits) 
    {
        if(digits.length()==0)
            return new ArrayList<>();
        Map<Character , String> mpp = new HashMap<>();
        mpp.put('2',"abc");
        mpp.put('3',"def");
        mpp.put('4',"ghi");
        mpp.put('5',"jkl");
        mpp.put('6',"mno");
        mpp.put('7',"pqrs");
        mpp.put('8',"tuv");
        mpp.put('9',"wxyz");

        StringBuilder temp = new StringBuilder();
        solve(0,digits,temp,mpp);
        return result;
    }
}
